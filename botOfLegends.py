# Importa o m√≥dulo sys para acessar argumentos da linha de comando e sair do programa se necess√°rio
import sys

# Importa a biblioteca AIML (Artificial Intelligence Markup Language)
import aiml

# Bibliotecas para normaliza√ß√£o e limpeza de texto (remo√ß√£o de acentos e s√≠mbolos)
import unicodedata
import re

# Biblioteca para interagir com o sistema de arquivos
import os


def clean_input(text):
    """
    Fun√ß√£o que limpa o texto digitado pelo usu√°rio:
    - Remove acentos (ex: "a√ß√£o" ‚Üí "acao")
    - Remove pontua√ß√£o e caracteres especiais (ex: "Ol√°!" ‚Üí "Ola")
    """
    text = unicodedata.normalize(
        "NFKD", text
    )  # Normaliza os acentos para caracteres base
    text = text.encode("ASCII", "ignore").decode("utf-8")  # Remove os acentos
    text = re.sub(
        r"[^\w\s]", "", text
    )  # Remove tudo que n√£o for letra, n√∫mero ou espa√ßo
    return text


def load_aiml_files(kernel, aiml_path):
    """
    Fun√ß√£o que carrega todos os arquivos .aiml encontrados em um diret√≥rio:
    - Verifica se o caminho √© v√°lido
    - Lista os arquivos com extens√£o .aiml
    - Usa o m√©todo kernel.learn() para cada um deles
    """
    if not os.path.isdir(aiml_path):
        print(f"Diret√≥rio AIML n√£o encontrado: {aiml_path}")
        sys.exit(1)  # Encerra o programa se o diret√≥rio n√£o existir

    # Filtra apenas os arquivos que terminam com .aiml
    arquivos = [f for f in os.listdir(aiml_path) if f.endswith(".aiml")]
    if not arquivos:
        print(f"Nenhum arquivo .aiml encontrado em {aiml_path}")
        sys.exit(1)  # Encerra se nenhum AIML for encontrado

    # Itera sobre os arquivos e carrega cada um no kernel
    for file in arquivos:
        caminho_completo = os.path.join(aiml_path, file)
        print(f"Carregando: {caminho_completo}")
        kernel.learn(caminho_completo)


def main():
    """
    Fun√ß√£o principal:
    - L√™ argumentos da linha de comando
    - Inicializa o interpretador AIML
    - Entra em um loop para processar mensagens do usu√°rio
    """
    if len(sys.argv) < 2:
        print("Uso: python botOfLegends.py aiml/")
        sys.exit(1)  # Se nenhum argumento for passado, finaliza com erro

    aiml_dir = sys.argv[
        1
    ]  # Primeiro argumento da linha de comando: pasta com arquivos .aiml
    k = aiml.Kernel()  # Cria uma inst√¢ncia do motor AIML

    load_aiml_files(k, aiml_dir)  # Carrega os arquivos .aiml no kernel

    print("ü§ñ Chatbot iniciado. Digite 'sair' para encerrar.\n")
    print("Ol√°, bem vindo ao 'BotOfLegends'! Qual qual desses personagens voc√™ deseja conversar?")
    print("1 - Garen\n2 - Braum\n3 - Gnar\n4 - Rammus\n")

    # Loop principal do chatbot
    while True:
        message = input("> ")  # L√™ a mensagem digitada pelo usu√°rio no terminal

        # Condi√ß√£o de parada do chatbot
        if message.lower() in ("sair", "exit", "quit"):
            print("Encerrando chatbot.")
            break

        message = clean_input(message)  # Limpa a mensagem com a fun√ß√£o definida
        response = k.respond(
            message
        )  # Envia a mensagem para o kernel AIML e obt√©m resposta
        print(response)  # Exibe a resposta no terminal


# Garante que a fun√ß√£o main s√≥ ser√° executada se o script for rodado diretamente
if __name__ == "__main__":
    main()
